<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Molecular Simulation Blog</title><link href="/" rel="alternate"></link><link href="/feeds/tag/lammps.atom.xml" rel="self"></link><id>/</id><updated>2015-04-09T16:40:00-07:00</updated><entry><title>Using_vmd</title><link href="/using_vmd.html" rel="alternate"></link><updated>2015-04-09T16:40:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-09:using_vmd.html</id><summary type="html">&lt;div class="section" id="you-have-run-your-simulation-now-what"&gt;
&lt;h2&gt;You have run your simulation. Now what?&lt;/h2&gt;
&lt;p&gt;So after you managed to get your trajectories from Lammps, or other Simulation packages its time to create nice vizualizations.
In this blog entry I will cover how do I use VMD and Lammps together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-lammps-to-output-trajectory-files"&gt;
&lt;h2&gt;Making Lammps to output trajectory files&lt;/h2&gt;
&lt;p&gt;In Lammps I use this command to produce trajectory files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dump&lt;/span&gt;            &lt;span class="n"&gt;dump_traj&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;dcd&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt; &lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dcd&lt;/span&gt;
&lt;span class="n"&gt;dump_modify&lt;/span&gt;     &lt;span class="n"&gt;dump_traj&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;unwrap&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt;              &lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will produce a .dcd file which will contain information about position of atoms for each timestep. The best part about .dcd format is that it is already binary, therefore takes about 5 times less space on your hard drive than ASCII files. Also it can be read by almost every MD trajectory processing software packages such as &lt;a class="citation-reference" href="#vmd" id="id1"&gt;[vmd]&lt;/a&gt; and &lt;a class="citation-reference" href="#mdanalysis" id="id2"&gt;[mdanalysis]&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vizualizing-your-trajectory"&gt;
&lt;h2&gt;Vizualizing your trajectory:&lt;/h2&gt;
&lt;img alt="" src="./images/polymer_amor.png" style="width: 200pt;" /&gt;
&lt;img alt="" src="./images/polymer100.png" style="width: 200pt;" /&gt;
&lt;img alt="" src="./images/polymer_cryst.png" style="width: 200pt;" /&gt;
&lt;p&gt;To visualize your trajectory one needs to give VMD information about bonds in the system, by providing VMD with .psf files, i.e bond information files.
Here comes handy the .data file: traj.data and &lt;a class="citation-reference" href="#topotools" id="id3"&gt;[topotools]&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;topo&lt;/span&gt; readlammpsdata traj.data molecular
&lt;span class="nv"&gt;animate&lt;/span&gt; write psf traj.psf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can use VMD to visualize the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;mol&lt;/span&gt; load psf traj.psf
&lt;span class="nv"&gt;animate&lt;/span&gt; read dcd traj.dcd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I wrote a simple python script to produce .psf file out of data file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_psf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    given data file produce psf file if it doesn&amp;#39;t exist yet&lt;/span&gt;
&lt;span class="sd"&gt;    if it does then use it&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;psffile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;PSF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.psf&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;DCD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.dcd&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datafile&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.data&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;vmdscript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;create_psf.vmd&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# write VMD loader script&lt;/span&gt;
        &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vmdfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;topology&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PSF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;datafile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;trajectory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;trajskip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trajskip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;            package require topotools&lt;/span&gt;
&lt;span class="s"&gt;            topo readlammpsdata &amp;quot;{0[datafile]}&amp;quot; angle&lt;/span&gt;
&lt;span class="s"&gt;            animate write psf &amp;quot;{0[topology]}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;        exit&lt;/span&gt;
&lt;span class="s"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tcl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tcl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;#os.system(&amp;quot;vmd -dispdev text -e {0[vmdfile]}&amp;quot;.format(parameters))&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wrote VMD script {0}  &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;If there is an error with {0}: &amp;#39;source {0}&amp;#39; to load everything manually, then repeat &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;running the python script with explicict parameters that were generated&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;the file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; already exists&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_doc&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--psf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;psffile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name of the future files, all other files will start with FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;datafile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./figures/polymer_0.8.data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="c"&gt;# type=lambda x: is_valid_file(parser, x),&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read datafile and if exists then convert it to psf file by invoking a vmd script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--trajectroy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;traj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quenchsim.dcd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Input trajectory file)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;--trajskip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trajskip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How many steps are to be skipped when trajectory &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        file is being red&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        (needs to be &amp;gt; 1, &amp;lt; number of frames) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--endframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;endframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;End frame of the trajectory file type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-st&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;--startframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;startframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start frame of the trajectory file type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_psf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just run this commands to run the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$python&lt;/span&gt; test.py -h
usage: test.py &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-f FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-t FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-s TRAJSKIP&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-e ENDFRAME&lt;span class="o"&gt;]&lt;/span&gt;
               &lt;span class="o"&gt;[&lt;/span&gt;-st STARTFRAME&lt;span class="o"&gt;]&lt;/span&gt;
optional arguments:
  -h, --help            show this &lt;span class="nb"&gt;help &lt;/span&gt;message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -f FILE, --psf FILE   Name of the future files, all other files will start
                        with FILE &lt;span class="o"&gt;(&lt;/span&gt;default: None&lt;span class="o"&gt;)&lt;/span&gt;
  -d FILE, --data FILE  &lt;span class="nb"&gt;read &lt;/span&gt;datafile and &lt;span class="k"&gt;if&lt;/span&gt; exists &lt;span class="k"&gt;then&lt;/span&gt; convert it to psf
                        file by invoking a vmd script &lt;span class="o"&gt;(&lt;/span&gt;default:
                        ./figures/polymer_0.8.data&lt;span class="o"&gt;)&lt;/span&gt;
  -t FILE, --trajectroy FILE
                        Input trajectory file&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: quenchsim.dcd&lt;span class="o"&gt;)&lt;/span&gt;
  -s TRAJSKIP, --trajskip TRAJSKIP
                        How many steps are to be skipped when trajectory file
                        is being red &lt;span class="o"&gt;(&lt;/span&gt;needs to be &amp;gt; 1, &amp;lt; number of frames&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: 40&lt;span class="o"&gt;)&lt;/span&gt;
  -e ENDFRAME, --endframe ENDFRAME
                        End frame of the trajectory file &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: -1&lt;span class="o"&gt;)&lt;/span&gt;
  -st STARTFRAME, --startframe STARTFRAME
                        Start frame of the trajectory file &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: 0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils citation" frame="void" id="topotools" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[topotools]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Topotools: &lt;a class="reference external" href="https://sites.google.com/site/akohlmey/software/topotools"&gt;https://sites.google.com/site/akohlmey/software/topotools&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mdanalysis" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[mdanalysis]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;MDAnalysis: &lt;a class="reference external" href="https://code.google.com/p/mdanalysis/"&gt;https://code.google.com/p/mdanalysis/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="vmd" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[vmd]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;VMD: &lt;a class="reference external" href="http://www.ks.uiuc.edu/Research/vmd/"&gt;http://www.ks.uiuc.edu/Research/vmd/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="VMD"></category><category term="Python"></category><category term="Lammps"></category><category term="Software"></category></entry><entry><title>installing_soft</title><link href="/installing_soft.html" rel="alternate"></link><updated>2015-04-08T13:54:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-08:installing_soft.html</id><summary type="html">&lt;div class="section" id="what-do-we-need"&gt;
&lt;h2&gt;What do we need?&lt;/h2&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;In order to do Molecular Dynamics one needs to install essential software.&lt;/p&gt;
&lt;p&gt;We'll need to install several packages in order to be fully ready for our simulations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Molecular Dynamics package &lt;a class="citation-reference" href="#lammps" id="id1"&gt;[lammps]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python installation with all essential packages &lt;a class="citation-reference" href="#anaconda" id="id2"&gt;[anaconda]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Molecular Trajectory Analysis package &lt;a class="citation-reference" href="#mdanalysis" id="id3"&gt;[mdanalysis]&lt;/a&gt; , &lt;a class="citation-reference" href="#pizza" id="id4"&gt;[pizza]&lt;/a&gt; , &lt;a class="citation-reference" href="#moltemplate" id="id5"&gt;[moltemplate]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tool to visualize your trajectory &lt;a class="citation-reference" href="#vmd" id="id6"&gt;[vmd]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-install-lammps"&gt;
&lt;h2&gt;How to install Lammps?&lt;/h2&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;To install Lammps one may follow one of these &lt;a class="reference external" href="http://lammps.sandia.gov/doc/Section_start.html#start_2_5"&gt;tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The easiest way to install &lt;a class="citation-reference" href="#lammps" id="id7"&gt;[lammps]&lt;/a&gt; on Ubuntu machines would be :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo add-apt-repository ppa:gladky-anton/lammps
sudo apt-get update
sudo apt-get install lammps-daily

&lt;span class="c"&gt;#it builds with FFTW3 and OpenMPI.&lt;/span&gt;

lammps-daily -in in.lj

&lt;span class="c"&gt;#To get a copy of the current documentation and examples:&lt;/span&gt;
&lt;span class="c"&gt;#which will download the doc files in /usr/share/doc/lammps-daily-doc/doc and example problems in /usr/share/doc/lammps-doc/examples.&lt;/span&gt;
sudo apt-get install lammps-daily-doc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my mac it was very straight-forward as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew tap homebrew/science
brew install lammps
&lt;span class="c"&gt;#brew install lammps --HEAD --with-mpi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows one may download a setup file and install it, or install it using &lt;a class="reference external" href="http://sjbyrnes.com/LAMMPStutorial.html"&gt;lammps_cygwin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-install-anaconda-python-distribution"&gt;
&lt;h2&gt;How to install Anaconda Python distribution?&lt;/h2&gt;
&lt;p&gt;I love Python, i think it is arguably the easiest &amp;quot;heavyweight&amp;quot; programming language to learn, it has enormous potential for your tasks, and a wonderful community.
For scientific use one may download an open-source distribution called &lt;cite&gt;Anaconda&lt;/cite&gt; which has everything a scientist may need.
On any &lt;cite&gt;*nix&lt;/cite&gt; machine one may install it by downloading &lt;cite&gt;.sh&lt;/cite&gt; file, and running &lt;cite&gt;bash Anaconda*.sh&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Installing any other Python packages will be as easy as: &lt;cite&gt;pip install &amp;lt;name of the package&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;So to install Molecular Dynamics trajectory Analysis program one can install &lt;a class="citation-reference" href="#mdanalysis" id="id8"&gt;[mdanalysis]&lt;/a&gt;, which is a Python based program, with an easy interface and good community.&lt;/p&gt;
&lt;p&gt;To install it one simply needs to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install MDAnalysis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To install &lt;a class="citation-reference" href="#pizza" id="id9"&gt;[pizza]&lt;/a&gt; and &lt;a class="citation-reference" href="#moltemplate" id="id10"&gt;[moltemplate]&lt;/a&gt; one simply needs to download the .tar files, extract them and add to the path
To do that we need to add this lines to ~/.bashrc file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:/path_to_moltempalate/moltemplate/src&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;MOLTEMPLATE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path_to_moltempalate/moltemplate/common&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PYTHONPATH&lt;/span&gt;&lt;span class="s2"&gt;:/path_to_pizza/pizza-2Jul14/src&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visualizing-molecular-dynamics-trajectory"&gt;
&lt;h2&gt;Visualizing Molecular Dynamics Trajectory&lt;/h2&gt;
&lt;p&gt;To visualize MD trajectories, we need to install &lt;a class="citation-reference" href="#vmd" id="id11"&gt;[vmd]&lt;/a&gt;. To do that on Linux systems, we need to go to their website and download a .tar file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tar -xzvf vmd.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;vmd/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After downloading and untaring the archive it is all gravy:
We just need &lt;cite&gt;vim configure&lt;/cite&gt;, and change &lt;cite&gt;home_bin_dir=..&lt;/cite&gt;,`home_library_dir` to where we want VMD to be.&lt;/p&gt;
&lt;p&gt;On mac systems just needs to download a .dmg file and install it by just clicking it. Sometimes we also need to specify the location of the executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;vmdappdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Applications/VMD 1.9.2.app/Contents&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# vmdappdir=&amp;#39;/Applications/VMD1.8.5.app/Contents&amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;# (change it to where vmd lies, obviously ;))&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;vmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;$vmdappdir/Resources/VMD.app/Contents/MacOS/VMD&amp;quot; $\*&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;textvmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vmd -dispdev text &lt;/span&gt;&lt;span class="nv"&gt;$\&lt;/span&gt;&lt;span class="s2"&gt;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils citation" frame="void" id="moltemplate" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[moltemplate]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id5"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id10"&gt;2&lt;/a&gt;)&lt;/em&gt; Moltemplate: &lt;a class="reference external" href="http://www.moltemplate.org/"&gt;http://www.moltemplate.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="pizza" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[pizza]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id9"&gt;2&lt;/a&gt;)&lt;/em&gt; Pizza: &lt;a class="reference external" href="http://www.sandia.gov/~sjplimp/download.html"&gt;http://www.sandia.gov/~sjplimp/download.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="vmd" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[vmd]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id6"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id11"&gt;2&lt;/a&gt;)&lt;/em&gt; Visual Molecular Dynamics: &lt;a class="reference external" href="http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=VMD"&gt;http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=VMD&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mdanalysis" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[mdanalysis]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id8"&gt;2&lt;/a&gt;)&lt;/em&gt; MD: &lt;a class="reference external" href="https://code.google.com/p/mdanalysis/"&gt;https://code.google.com/p/mdanalysis/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="anaconda" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[anaconda]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Anaconda Python Installation: &lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="lammps" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[lammps]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id7"&gt;2&lt;/a&gt;)&lt;/em&gt; lammps: &lt;a class="reference external" href="http://lammps.sandia.gov/"&gt;http://lammps.sandia.gov/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Lammps"></category><category term="VMD"></category><category term="MDAnalysis"></category><category term="Software"></category><category term="Python"></category></entry><entry><title>Create_melt</title><link href="/create_melt.html" rel="alternate"></link><updated>2015-04-05T17:03:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-05:create_melt.html</id><summary type="html">&lt;p&gt;How to create a data file of a polymer system for Lammps.&lt;/p&gt;
&lt;p&gt;Creating data files for polymer systems appears to be a daunting task.
The process of creating a data file includes three stages. One of possible ways of tackling this problem would be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create initial configuration using Monte-Carlo random walk&lt;/li&gt;
&lt;li&gt;Run a Lammps simulation for equilibrating melt&lt;/li&gt;
&lt;li&gt;Analyze chain confirmation, if not satisfactory go to stage 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Creating initial configuration is relatively easy. The Lammps package comes with an tool called chain.f. Very fast Fortran program for creating initial configurations.&lt;/p&gt;
&lt;p&gt;To create a melt we need to create a file def.chain, which is located in the &lt;cite&gt;tools/&lt;/cite&gt; directory.&lt;/p&gt;
&lt;p&gt;def.chain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Polymer&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt;

&lt;span class="mf"&gt;0.8442&lt;/span&gt;          &lt;span class="n"&gt;rhostar&lt;/span&gt;
&lt;span class="mi"&gt;592984&lt;/span&gt;          &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="c1"&gt;# seed (8 digits or less)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;               &lt;span class="c1"&gt;# of sets of chains (blank line + 6 values for each set)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;               &lt;span class="n"&gt;molecule&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;rule:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;ends&lt;/span&gt;

&lt;span class="mi"&gt;320&lt;/span&gt;             &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;chains&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;             &lt;span class="n"&gt;monomers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;               &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;monomers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;LAMMPS&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;               &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;bonds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;LAMMPS&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.97&lt;/span&gt;            &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;monomers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reduced&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.02&lt;/span&gt;            &lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reduced&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After compiling &lt;cite&gt;chain.f&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gfortran chain.f -o chain.out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We may create a polymer melt using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./chain.out &amp;lt; def.chain &amp;gt; init.data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the init.data looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;LAMMPS&lt;/span&gt; &lt;span class="n"&gt;FENE&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;

   &lt;span class="mi"&gt;140&lt;/span&gt;  &lt;span class="n"&gt;atoms&lt;/span&gt;
   &lt;span class="mi"&gt;134&lt;/span&gt;  &lt;span class="n"&gt;bonds&lt;/span&gt;
   &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;angles&lt;/span&gt;
   &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;dihedrals&lt;/span&gt;
   &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;impropers&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="Lammps"></category><category term="Simulation"></category></entry><entry><title>Equilibrate_melt</title><link href="/equilibrate_melt.html" rel="alternate"></link><updated>2015-04-05T16:57:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-05:equilibrate_melt.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of contents:&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#quantifying-equilibration" id="id4"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;Quantifying equilibration:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-algorithm-to-use-to-prepare-equilibrated-melts" id="id5"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;What algorithm to use, to prepare equilibrated melts?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-to-use-equilibrated-melt-datafile-with-an-actual-simulation" id="id6"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;How to use equilibrated_melt_datafile with an actual simulation?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Creating polymer structures using self-avoiding random walk was pretty easy, which is not the case for equilibration.
Equilibrating polymer melts can be considered as an art itself.&lt;/p&gt;
&lt;p&gt;There are several key questions we are answering in this post:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What melts can be considered equilibrated?&lt;/li&gt;
&lt;li&gt;What algorithm to use, to prepare equilibrated melts?&lt;/li&gt;
&lt;li&gt;How to use equilibrated_melt_datafile with an actual simulation?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets answer this questions:&lt;/p&gt;
&lt;div class="section" id="quantifying-equilibration"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;Quantifying equilibration:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine we have equilibrated our polymer melt, how do we check whether the chains are equilibrated well enough?&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;To understand whether our melt is equilibrated enough we need to consider 4 following parameters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Chain statistics&lt;/li&gt;
&lt;li&gt;Radial distribution function (RDF)&lt;/li&gt;
&lt;li&gt;Thermodynamic parameters&lt;/li&gt;
&lt;li&gt;MSD&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lets start with second and third items in our list, they are pretty obvious: if there is any time evolution of your thermodynamic parameters (for example Energy) then,obviously, your melt is not equilibrated enough. The same applies to the RDF.&lt;/p&gt;
&lt;p&gt;Equilibration of long polymer chains can be a daunting task and for the chains longer than C1000 is literally unfeasable to achieve using the brute force MD run. Fortunately there are several methods that can help you with achieving the well-equilibrated state in comparetively short time.  For a detailed analysis of these methods there are couple of must read papers.
One of them is &lt;a class="citation-reference" href="#auhl" id="id1"&gt;[auhl]&lt;/a&gt;. For me personally this paper was also very helpful &lt;a class="citation-reference" href="#sliozberg" id="id2"&gt;[sliozberg]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for the chain statistics it has to be gaussian, i.e should be a &lt;a class="citation-reference" href="#randomcoil" id="id3"&gt;[randomcoil]&lt;/a&gt;. In a gaussian chain, chain is randomly coiled, and exhibits a certain relation between end-to-end distance (average distance between the last and the first atom in chain) and gyration radius(a quantity that shows how coiled the structure is) also it is regulated by the Mean Square Difference paramter $MSID(n) = \frac{&amp;lt;R^2(n)&amp;gt;}{n}$. When chains are equilibrated they exhibit gaussian properties, i.e $\frac{MSID(N)}{R^2_g} = 6$ and MSID(n) behaviour starts with linear part and then saturates.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="./images/output_20_1.png" style="width: 400.0pt;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-algorithm-to-use-to-prepare-equilibrated-melts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;What algorithm to use, to prepare equilibrated melts?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Equilibration included several steps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Unphysical Kremer-Grest equilibration using bead-springs. [Equilibrate generated beads with Kremer-Grest model(atoms+bonds)]&lt;/li&gt;
&lt;li&gt;Adding angle/dihedral interactions&lt;/li&gt;
&lt;li&gt;Physical MD run equilibration(Equilibrate in a Physical (NVE, NPT) ensemble&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kremer-Grest. This is the main part of the equilibration, after this the chains need to be fully relaxed, have gaussian chain statistics, adequate radial distribution function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Kremer-Grest model.&lt;/span&gt;

&lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="n"&gt;lj&lt;/span&gt;
&lt;span class="n"&gt;atom_style&lt;/span&gt; &lt;span class="n"&gt;bond&lt;/span&gt;
&lt;span class="n"&gt;special_bonds&lt;/span&gt; &lt;span class="n"&gt;lj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;coul&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;read_data&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;neighbor&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;
&lt;span class="n"&gt;neigh_modify&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;comm_modify&lt;/span&gt; &lt;span class="n"&gt;vel&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;bond_style&lt;/span&gt; &lt;span class="n"&gt;fene&lt;/span&gt;
&lt;span class="n"&gt;bond_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="nb"&gt;dump&lt;/span&gt;            &lt;span class="n"&gt;mydump&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;dcd&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;equil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dcd&lt;/span&gt;
&lt;span class="n"&gt;timestep&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;
&lt;span class="n"&gt;thermo&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;thermo_modify&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt; &lt;span class="nb"&gt;no&lt;/span&gt;
&lt;span class="n"&gt;pair_style&lt;/span&gt; &lt;span class="n"&gt;dpd&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;122347&lt;/span&gt;   &lt;span class="c1"&gt;# very soft pair-potential&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;

&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;17786140&lt;/span&gt;

&lt;span class="c1"&gt;# bonds in init.data are unphysicaly close&lt;/span&gt;
&lt;span class="c1"&gt;# fix nve/limit doesn&amp;#39;t let the system to explode&lt;/span&gt;
&lt;span class="c1"&gt;# during the equilibration run&lt;/span&gt;

&lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;unfix&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;

&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart_dpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;50.0&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;15086120&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;15786120&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="c1"&gt;#......&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1000.0&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;15086189&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart_dpd1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;pair_style&lt;/span&gt; &lt;span class="n"&gt;hybrid&lt;/span&gt;&lt;span class="sr"&gt;/overlay lj/c&lt;/span&gt;&lt;span class="n"&gt;ut&lt;/span&gt; &lt;span class="mf"&gt;1.122462&lt;/span&gt; &lt;span class="n"&gt;dpd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tstat&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.122462&lt;/span&gt; &lt;span class="mi"&gt;122347&lt;/span&gt;
&lt;span class="n"&gt;pair_modify&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;lj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;1.122462&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dpd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tstat&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt; &lt;span class="mf"&gt;1.122462&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;1508612013&lt;/span&gt;   &lt;span class="c1"&gt;# this velocity reset is repeated 10 times&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart_push&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;15086125&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt;

&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;equil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ==================================================== --&gt;
&lt;!-- modifying data files --&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-equilibrated-melt-datafile-with-an-actual-simulation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;How to use equilibrated_melt_datafile with an actual simulation?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we recall the init.data created at the first stage of creating melt it started like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;LAMMPS&lt;/span&gt; &lt;span class="n"&gt;FENE&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;

&lt;span class="mi"&gt;140&lt;/span&gt;  &lt;span class="n"&gt;atoms&lt;/span&gt;
&lt;span class="mi"&gt;134&lt;/span&gt;  &lt;span class="n"&gt;bonds&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;angles&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;dihedrals&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;impropers&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the data file didn't have any information about angle, dihedrals in the systems. Lets now consider possible ways of tackling this problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;


&lt;span class="c1"&gt;# here is the main file for creating a polymer melt&lt;/span&gt;
&lt;span class="c1"&gt;# input : DATA_file_input = initial melt created by chain.f, or the equil.data - equilibrated melt by in.kremer that has only fene Bonds&lt;/span&gt;
&lt;span class="c1"&gt;# output : DATA_file_output = final melt that has angles ( if required dihedrals as well)&lt;/span&gt;

&lt;span class="c1"&gt;#set input and output&lt;/span&gt;
&lt;span class="n"&gt;datain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;equil.data&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dataout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tmp.data&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#get information about number of atoms and number of bonds&lt;/span&gt;
&lt;span class="n"&gt;STR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;less&lt;/span&gt; &lt;span class="nv"&gt;$datain&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;atoms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$STR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;natoms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LIT&lt;/span&gt;
&lt;span class="c1"&gt;# calculate number of angles, knowing how many atoms and bonds we have&lt;/span&gt;
&lt;span class="n"&gt;STRb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;less&lt;/span&gt; &lt;span class="nv"&gt;$datain&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;bonds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LITb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$STRb&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nbond&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LITb&lt;/span&gt;

&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;nangle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;$nbond&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$natoms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ndih&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;#write data file in required format&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;$datain&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;

&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;LAMMPS  data file&lt;/span&gt;

&lt;span class="s"&gt;$natoms  atoms&lt;/span&gt;
&lt;span class="s"&gt;$nbond  bonds&lt;/span&gt;
&lt;span class="s"&gt;$nangle  angles&lt;/span&gt;

&lt;span class="s"&gt;1  atom types&lt;/span&gt;
&lt;span class="s"&gt;1  bond types&lt;/span&gt;
&lt;span class="s"&gt;1  angle types&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;

&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1,/bond types/d&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1d&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Velocities/,/Bonds/{//!d}&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Velocities/d&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;

&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temprary_file&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;

&lt;span class="c1"&gt;#creating additional files for generating angle bond topology&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1  * * *   * * &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;angles_by_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="c1"&gt;# sed -i &amp;#39;/improper/d&amp;#39; result_without.data&lt;/span&gt;
&lt;span class="n"&gt;bash&lt;/span&gt; &lt;span class="n"&gt;gen_all_angles_topo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;temprary_file&lt;/span&gt;  &lt;span class="nv"&gt;$dataout&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;temprary_file&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;angles_by_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="c1"&gt;#replace multiple blanc lines with a single one&lt;/span&gt;
&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/^$/N;/^\n$/D&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$dataout&lt;/span&gt;

&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/dihedral/d&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$dataout&lt;/span&gt;

&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/improper/d&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$dataout&lt;/span&gt;

&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Bond Coeffs/,/Atoms/{//!d}&amp;#39;&lt;/span&gt;  &lt;span class="nv"&gt;$dataout&lt;/span&gt;
&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Bond Coeffs/d&amp;#39;&lt;/span&gt;  &lt;span class="nv"&gt;$dataout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After applying this script we get the following data file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;LAMMPS&lt;/span&gt;  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;

&lt;span class="mi"&gt;140&lt;/span&gt;  &lt;span class="n"&gt;atoms&lt;/span&gt;
&lt;span class="mi"&gt;134&lt;/span&gt;  &lt;span class="n"&gt;bonds&lt;/span&gt;
&lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="n"&gt;angles&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;atom&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;bond&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils citation" frame="void" id="randomcoil" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[randomcoil]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Random Coil: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Random_coil"&gt;http://en.wikipedia.org/wiki/Random_coil&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="auhl" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[auhl]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://scitation.aip.org/content/aip/journal/jcp/119/24/10.1063/1.1628670"&gt;http://scitation.aip.org/content/aip/journal/jcp/119/24/10.1063/1.1628670&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="sliozberg" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[sliozberg]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Sliozberg: &lt;a class="reference external" href="http://lammps.sandia.gov/threads/pdfEfEwE2ix6N.pdf"&gt;http://lammps.sandia.gov/threads/pdfEfEwE2ix6N.pdf&lt;/a&gt; &amp;lt;&lt;a class="reference external" href="http://lammps.sandia.gov/threads/pdfEfEwE2ix6N.pdf"&gt;http://lammps.sandia.gov/threads/pdfEfEwE2ix6N.pdf&lt;/a&gt;&amp;gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Lammps"></category><category term="Equilibration"></category><category term="Simulation"></category></entry><entry><title>Lammps_intro</title><link href="/lammps_intro.html" rel="alternate"></link><updated>2015-04-05T16:54:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-05:lammps_intro.html</id><summary type="html">&lt;p&gt;Running simulations in Lammps. In this section we will create a group of atoms
and run an easy lammps simulation with lj potential.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 3d Lennard-Jones melt&lt;/span&gt;
&lt;span class="n"&gt;units&lt;/span&gt;       &lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="c1"&gt;#Angstroms, T kelvins,&lt;/span&gt;

&lt;span class="n"&gt;boundary&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="c1"&gt;#periodic boundary conds&lt;/span&gt;

&lt;span class="n"&gt;atom_style&lt;/span&gt;  &lt;span class="n"&gt;atomic&lt;/span&gt;
&lt;span class="n"&gt;lattice&lt;/span&gt;     &lt;span class="n"&gt;bcc&lt;/span&gt; &lt;span class="mf"&gt;3.82&lt;/span&gt;
&lt;span class="c1"&gt;#10 times x , 10 times y , 10 times z #size&lt;/span&gt;
&lt;span class="n"&gt;region&lt;/span&gt;      &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;create_box&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;
&lt;span class="n"&gt;create_atoms&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;
&lt;span class="n"&gt;mass&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;

&lt;span class="c1"&gt;#potential&lt;/span&gt;
&lt;span class="n"&gt;pair_style&lt;/span&gt;  &lt;span class="n"&gt;lj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mf"&gt;0.11&lt;/span&gt; &lt;span class="mf"&gt;4.11&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt;

&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;273.3&lt;/span&gt; &lt;span class="mi"&gt;50007878&lt;/span&gt;

&lt;span class="c1"&gt;# neighbor  0.3 bin&lt;/span&gt;
&lt;span class="c1"&gt;# neigh_modify  every 20 delay 0 check no&lt;/span&gt;
&lt;span class="n"&gt;thermo&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;#how often we want to dump list&lt;/span&gt;

&lt;span class="n"&gt;fix&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="n"&gt;unfix&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;dump&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="nb"&gt;dump&lt;/span&gt;&lt;span class="o"&gt;.*.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="n"&gt;zs&lt;/span&gt;
&lt;span class="n"&gt;fix&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;

&lt;span class="n"&gt;thermo&lt;/span&gt;      &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;     &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How to run a simulation from a saved snapshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;#LAMMPS&lt;/span&gt;
&lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="n"&gt;boundary&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;atom_style&lt;/span&gt; &lt;span class="n"&gt;atomic&lt;/span&gt;

&lt;span class="n"&gt;pair_style&lt;/span&gt;    &lt;span class="n"&gt;lj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt;
&lt;span class="c1"&gt;# use this pair style , ljcut means that we have 12/6 potential Van-der-Vaals, and 10.5 is its cutoff&lt;/span&gt;
&lt;span class="n"&gt;read_data&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;         &lt;span class="c1"&gt;# read data from a saved state&lt;/span&gt;
&lt;span class="n"&gt;pair_coeff&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mf"&gt;0.11&lt;/span&gt; &lt;span class="mf"&gt;4.11&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt; &lt;span class="c1"&gt;# read parameters&lt;/span&gt;

&lt;span class="c1"&gt;#set particles velocity to 0 C&lt;/span&gt;
&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="mf"&gt;273.3&lt;/span&gt; &lt;span class="mi"&gt;50007878&lt;/span&gt;

&lt;span class="c1"&gt;# list thermodynamic output every 100 steps&lt;/span&gt;
&lt;span class="n"&gt;thermo&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# dump images that would be vizualized by the AtomEye program&lt;/span&gt;
&lt;span class="c1"&gt;# They all have cfg format&lt;/span&gt;
&lt;span class="c1"&gt;# 1 is a name of our dump&lt;/span&gt;
&lt;span class="c1"&gt;# all - is that we dump all atoms&lt;/span&gt;
&lt;span class="c1"&gt;# cfg is format&lt;/span&gt;
&lt;span class="c1"&gt;# 50 - is how often we dumping&lt;/span&gt;
&lt;span class="c1"&gt;# name.*.cfg , where * means that when we dump these files they are going to be saved in this format&lt;/span&gt;
&lt;span class="c1"&gt;# step=0 myrun.0.cfg, step=50 myrun.50.cfg and etc&lt;/span&gt;
&lt;span class="c1"&gt;# we are dumping mass, type of the particles and x , y , z coordinates&lt;/span&gt;
&lt;span class="nb"&gt;dump&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;myrun&lt;/span&gt;&lt;span class="o"&gt;.*.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="n"&gt;zs&lt;/span&gt;
&lt;span class="c1"&gt;#use this fix file&lt;/span&gt;
&lt;span class="n"&gt;fix&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;nve&lt;/span&gt;
&lt;span class="c1"&gt;#run for these many steps&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;        &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="c1"&gt;#write output into result2.data (if we want to simulate it later)&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="c1"&gt;# initial - &amp;gt; result.data -&amp;gt; result2.data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="Lammps"></category><category term="Simulation"></category></entry></feed>