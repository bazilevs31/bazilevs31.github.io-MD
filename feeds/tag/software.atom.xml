<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Molecular Simulation Blog</title><link href="/" rel="alternate"></link><link href="/feeds/tag/software.atom.xml" rel="self"></link><id>/</id><updated>2015-04-09T16:40:00-07:00</updated><entry><title>Using_vmd</title><link href="/using_vmd.html" rel="alternate"></link><updated>2015-04-09T16:40:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-09:using_vmd.html</id><summary type="html">&lt;div class="section" id="you-have-run-your-simulation-now-what"&gt;
&lt;h2&gt;You have run your simulation. Now what?&lt;/h2&gt;
&lt;p&gt;So after you managed to get your trajectories from Lammps, or other Simulation packages its time to create nice vizualizations.
In this blog entry I will cover how do I use VMD and Lammps together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-lammps-to-output-trajectory-files"&gt;
&lt;h2&gt;Making Lammps to output trajectory files&lt;/h2&gt;
&lt;p&gt;In Lammps I use this command to produce trajectory files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dump&lt;/span&gt;            &lt;span class="n"&gt;dump_traj&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;dcd&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt; &lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dcd&lt;/span&gt;
&lt;span class="n"&gt;dump_modify&lt;/span&gt;     &lt;span class="n"&gt;dump_traj&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;unwrap&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;write_data&lt;/span&gt;              &lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will produce a .dcd file which will contain information about position of atoms for each timestep. The best part about .dcd format is that it is already binary, therefore takes about 5 times less space on your hard drive than ASCII files. Also it can be read by almost every MD trajectory processing software packages such as &lt;a class="citation-reference" href="#vmd" id="id1"&gt;[vmd]&lt;/a&gt; and &lt;a class="citation-reference" href="#mdanalysis" id="id2"&gt;[mdanalysis]&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vizualizing-your-trajectory"&gt;
&lt;h2&gt;Vizualizing your trajectory:&lt;/h2&gt;
&lt;img alt="" src="./images/polymer_amor.png" style="width: 200pt;" /&gt;
&lt;img alt="" src="./images/polymer100.png" style="width: 200pt;" /&gt;
&lt;img alt="" src="./images/polymer_cryst.png" style="width: 200pt;" /&gt;
&lt;p&gt;To visualize your trajectory one needs to give VMD information about bonds in the system, by providing VMD with .psf files, i.e bond information files.
Here comes handy the .data file: traj.data and &lt;a class="citation-reference" href="#topotools" id="id3"&gt;[topotools]&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;topo&lt;/span&gt; readlammpsdata traj.data molecular
&lt;span class="nv"&gt;animate&lt;/span&gt; write psf traj.psf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can use VMD to visualize the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;mol&lt;/span&gt; load psf traj.psf
&lt;span class="nv"&gt;animate&lt;/span&gt; read dcd traj.dcd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I wrote a simple python script to produce .psf file out of data file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_psf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    given data file produce psf file if it doesn&amp;#39;t exist yet&lt;/span&gt;
&lt;span class="sd"&gt;    if it does then use it&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;psffile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;PSF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psffile&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.psf&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;DCD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.dcd&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datafile&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.data&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;vmdscript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;create_psf.vmd&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# write VMD loader script&lt;/span&gt;
        &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vmdfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;topology&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PSF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;datafile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;trajectory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;&amp;#39;trajskip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trajskip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;            package require topotools&lt;/span&gt;
&lt;span class="s"&gt;            topo readlammpsdata &amp;quot;{0[datafile]}&amp;quot; angle&lt;/span&gt;
&lt;span class="s"&gt;            animate write psf &amp;quot;{0[topology]}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;        exit&lt;/span&gt;
&lt;span class="s"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tcl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tcl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;#os.system(&amp;quot;vmd -dispdev text -e {0[vmdfile]}&amp;quot;.format(parameters))&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wrote VMD script {0}  &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;If there is an error with {0}: &amp;#39;source {0}&amp;#39; to load everything manually, then repeat &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;running the python script with explicict parameters that were generated&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmdscript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;the file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; already exists&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psffile&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_doc&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--psf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;psffile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name of the future files, all other files will start with FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;datafile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./figures/polymer_0.8.data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="c"&gt;# type=lambda x: is_valid_file(parser, x),&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read datafile and if exists then convert it to psf file by invoking a vmd script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--trajectroy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;traj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quenchsim.dcd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Input trajectory file)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;--trajskip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trajskip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How many steps are to be skipped when trajectory &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        file is being red&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        (needs to be &amp;gt; 1, &amp;lt; number of frames) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;                                        type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--endframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;endframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;End frame of the trajectory file type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-st&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;--startframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;startframe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start frame of the trajectory file type (default: &lt;/span&gt;&lt;span class="si"&gt;%(default)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_psf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just run this commands to run the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$python&lt;/span&gt; test.py -h
usage: test.py &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-f FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-t FILE&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-s TRAJSKIP&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-e ENDFRAME&lt;span class="o"&gt;]&lt;/span&gt;
               &lt;span class="o"&gt;[&lt;/span&gt;-st STARTFRAME&lt;span class="o"&gt;]&lt;/span&gt;
optional arguments:
  -h, --help            show this &lt;span class="nb"&gt;help &lt;/span&gt;message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -f FILE, --psf FILE   Name of the future files, all other files will start
                        with FILE &lt;span class="o"&gt;(&lt;/span&gt;default: None&lt;span class="o"&gt;)&lt;/span&gt;
  -d FILE, --data FILE  &lt;span class="nb"&gt;read &lt;/span&gt;datafile and &lt;span class="k"&gt;if&lt;/span&gt; exists &lt;span class="k"&gt;then&lt;/span&gt; convert it to psf
                        file by invoking a vmd script &lt;span class="o"&gt;(&lt;/span&gt;default:
                        ./figures/polymer_0.8.data&lt;span class="o"&gt;)&lt;/span&gt;
  -t FILE, --trajectroy FILE
                        Input trajectory file&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: quenchsim.dcd&lt;span class="o"&gt;)&lt;/span&gt;
  -s TRAJSKIP, --trajskip TRAJSKIP
                        How many steps are to be skipped when trajectory file
                        is being red &lt;span class="o"&gt;(&lt;/span&gt;needs to be &amp;gt; 1, &amp;lt; number of frames&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: 40&lt;span class="o"&gt;)&lt;/span&gt;
  -e ENDFRAME, --endframe ENDFRAME
                        End frame of the trajectory file &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: -1&lt;span class="o"&gt;)&lt;/span&gt;
  -st STARTFRAME, --startframe STARTFRAME
                        Start frame of the trajectory file &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;default: 0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils citation" frame="void" id="topotools" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[topotools]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Topotools: &lt;a class="reference external" href="https://sites.google.com/site/akohlmey/software/topotools"&gt;https://sites.google.com/site/akohlmey/software/topotools&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mdanalysis" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[mdanalysis]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;MDAnalysis: &lt;a class="reference external" href="https://code.google.com/p/mdanalysis/"&gt;https://code.google.com/p/mdanalysis/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="vmd" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[vmd]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;VMD: &lt;a class="reference external" href="http://www.ks.uiuc.edu/Research/vmd/"&gt;http://www.ks.uiuc.edu/Research/vmd/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="VMD"></category><category term="Python"></category><category term="Lammps"></category><category term="Software"></category></entry><entry><title>installing_soft</title><link href="/installing_soft.html" rel="alternate"></link><updated>2015-04-08T13:54:00-07:00</updated><author><name>Vasiliy Triandafilidi</name></author><id>tag:,2015-04-08:installing_soft.html</id><summary type="html">&lt;div class="section" id="what-do-we-need"&gt;
&lt;h2&gt;What do we need?&lt;/h2&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;In order to do Molecular Dynamics one needs to install essential software.&lt;/p&gt;
&lt;p&gt;We'll need to install several packages in order to be fully ready for our simulations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Molecular Dynamics package &lt;a class="citation-reference" href="#lammps" id="id1"&gt;[lammps]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python installation with all essential packages &lt;a class="citation-reference" href="#anaconda" id="id2"&gt;[anaconda]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Molecular Trajectory Analysis package &lt;a class="citation-reference" href="#mdanalysis" id="id3"&gt;[mdanalysis]&lt;/a&gt; , &lt;a class="citation-reference" href="#pizza" id="id4"&gt;[pizza]&lt;/a&gt; , &lt;a class="citation-reference" href="#moltemplate" id="id5"&gt;[moltemplate]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tool to visualize your trajectory &lt;a class="citation-reference" href="#vmd" id="id6"&gt;[vmd]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-install-lammps"&gt;
&lt;h2&gt;How to install Lammps?&lt;/h2&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;To install Lammps one may follow one of these &lt;a class="reference external" href="http://lammps.sandia.gov/doc/Section_start.html#start_2_5"&gt;tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The easiest way to install &lt;a class="citation-reference" href="#lammps" id="id7"&gt;[lammps]&lt;/a&gt; on Ubuntu machines would be :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo add-apt-repository ppa:gladky-anton/lammps
sudo apt-get update
sudo apt-get install lammps-daily

&lt;span class="c"&gt;#it builds with FFTW3 and OpenMPI.&lt;/span&gt;

lammps-daily -in in.lj

&lt;span class="c"&gt;#To get a copy of the current documentation and examples:&lt;/span&gt;
&lt;span class="c"&gt;#which will download the doc files in /usr/share/doc/lammps-daily-doc/doc and example problems in /usr/share/doc/lammps-doc/examples.&lt;/span&gt;
sudo apt-get install lammps-daily-doc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my mac it was very straight-forward as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew tap homebrew/science
brew install lammps
&lt;span class="c"&gt;#brew install lammps --HEAD --with-mpi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows one may download a setup file and install it, or install it using &lt;a class="reference external" href="http://sjbyrnes.com/LAMMPStutorial.html"&gt;lammps_cygwin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-install-anaconda-python-distribution"&gt;
&lt;h2&gt;How to install Anaconda Python distribution?&lt;/h2&gt;
&lt;p&gt;I love Python, i think it is arguably the easiest &amp;quot;heavyweight&amp;quot; programming language to learn, it has enormous potential for your tasks, and a wonderful community.
For scientific use one may download an open-source distribution called &lt;cite&gt;Anaconda&lt;/cite&gt; which has everything a scientist may need.
On any &lt;cite&gt;*nix&lt;/cite&gt; machine one may install it by downloading &lt;cite&gt;.sh&lt;/cite&gt; file, and running &lt;cite&gt;bash Anaconda*.sh&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Installing any other Python packages will be as easy as: &lt;cite&gt;pip install &amp;lt;name of the package&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;So to install Molecular Dynamics trajectory Analysis program one can install &lt;a class="citation-reference" href="#mdanalysis" id="id8"&gt;[mdanalysis]&lt;/a&gt;, which is a Python based program, with an easy interface and good community.&lt;/p&gt;
&lt;p&gt;To install it one simply needs to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install MDAnalysis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To install &lt;a class="citation-reference" href="#pizza" id="id9"&gt;[pizza]&lt;/a&gt; and &lt;a class="citation-reference" href="#moltemplate" id="id10"&gt;[moltemplate]&lt;/a&gt; one simply needs to download the .tar files, extract them and add to the path
To do that we need to add this lines to ~/.bashrc file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:/path_to_moltempalate/moltemplate/src&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;MOLTEMPLATE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path_to_moltempalate/moltemplate/common&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PYTHONPATH&lt;/span&gt;&lt;span class="s2"&gt;:/path_to_pizza/pizza-2Jul14/src&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visualizing-molecular-dynamics-trajectory"&gt;
&lt;h2&gt;Visualizing Molecular Dynamics Trajectory&lt;/h2&gt;
&lt;p&gt;To visualize MD trajectories, we need to install &lt;a class="citation-reference" href="#vmd" id="id11"&gt;[vmd]&lt;/a&gt;. To do that on Linux systems, we need to go to their website and download a .tar file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tar -xzvf vmd.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;vmd/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After downloading and untaring the archive it is all gravy:
We just need &lt;cite&gt;vim configure&lt;/cite&gt;, and change &lt;cite&gt;home_bin_dir=..&lt;/cite&gt;,`home_library_dir` to where we want VMD to be.&lt;/p&gt;
&lt;p&gt;On mac systems just needs to download a .dmg file and install it by just clicking it. Sometimes we also need to specify the location of the executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;vmdappdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Applications/VMD 1.9.2.app/Contents&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# vmdappdir=&amp;#39;/Applications/VMD1.8.5.app/Contents&amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;# (change it to where vmd lies, obviously ;))&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;vmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;$vmdappdir/Resources/VMD.app/Contents/MacOS/VMD&amp;quot; $\*&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;textvmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vmd -dispdev text &lt;/span&gt;&lt;span class="nv"&gt;$\&lt;/span&gt;&lt;span class="s2"&gt;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils citation" frame="void" id="moltemplate" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[moltemplate]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id5"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id10"&gt;2&lt;/a&gt;)&lt;/em&gt; Moltemplate: &lt;a class="reference external" href="http://www.moltemplate.org/"&gt;http://www.moltemplate.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="pizza" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[pizza]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id9"&gt;2&lt;/a&gt;)&lt;/em&gt; Pizza: &lt;a class="reference external" href="http://www.sandia.gov/~sjplimp/download.html"&gt;http://www.sandia.gov/~sjplimp/download.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="vmd" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[vmd]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id6"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id11"&gt;2&lt;/a&gt;)&lt;/em&gt; Visual Molecular Dynamics: &lt;a class="reference external" href="http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=VMD"&gt;http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=VMD&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mdanalysis" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[mdanalysis]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id8"&gt;2&lt;/a&gt;)&lt;/em&gt; MD: &lt;a class="reference external" href="https://code.google.com/p/mdanalysis/"&gt;https://code.google.com/p/mdanalysis/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="anaconda" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[anaconda]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Anaconda Python Installation: &lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="lammps" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[lammps]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id7"&gt;2&lt;/a&gt;)&lt;/em&gt; lammps: &lt;a class="reference external" href="http://lammps.sandia.gov/"&gt;http://lammps.sandia.gov/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Lammps"></category><category term="VMD"></category><category term="MDAnalysis"></category><category term="Software"></category><category term="Python"></category></entry></feed>